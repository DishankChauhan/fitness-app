rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidChallenge() {
      let requiredFields = ['title', 'description', 'type', 'target', 'startDate', 'endDate', 'stake', 'prizePool', 'status'];
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    function isValidUserProfile() {
      let requiredFields = ['email', 'displayName', 'tokens', 'createdAt'];
      return request.resource.data.keys().hasAll(requiredFields);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) && isValidUserProfile();
      allow update: if isOwner(userId) && 
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['displayName', 'tokens']);
      allow delete: if false; // Prevent user deletion
    }

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidChallenge();
      allow update: if isAuthenticated() &&
        (resource.data.status == 'active' || resource.data.status == 'completed');
      allow delete: if false; // Prevent challenge deletion
    }

    // User Challenges collection
    match /userChallenges/{challengeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/challenges/$(challengeId));
      allow update: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Following collection
    match /following/{userId}/users/{followedId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Prevent modification of transaction history
    }
  }
} 